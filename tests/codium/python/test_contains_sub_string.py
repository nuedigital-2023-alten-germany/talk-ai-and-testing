
# Generated by CodiumAI
from src.python.contains_sub_string import containSubstring


import pytest

"""
Code Analysis

Objective:
The objective of the function is to determine whether a given substring is present in a given main string or not. 

Inputs:
- mainStr: a string that represents the main string
- subStr: a string that represents the substring to be searched in the main string

Flow:
- The function takes two string inputs, mainStr and subStr.
- It checks whether the subStr is present in the mainStr or not using the 'in' operator.
- If the subStr is present in the mainStr, it returns True, otherwise, it returns False.

Outputs:
- True: if the subStr is present in the mainStr
- False: if the subStr is not present in the mainStr

Additional aspects:
- The function is case-sensitive, meaning that it will return False if the case of the subStr and mainStr do not match.
- The function does not modify the input strings.
"""
class TestContainsubstring:
    # Tests that containSubstring returns True when subStr is in mainStr
    def test_containsSubstring_HappyPath(self):
        assert containSubstring('hello world', 'world') == True

    # Tests that containSubstring returns True when subStr is a single character
    def test_containsSubstring_SubStrIsSingleChar(self):
        assert containSubstring('hello world', 'w') == True

    # Tests that containSubstring returns False when mainStr is empty
    def test_containsSubstring_EmptyMainStr(self):
        assert containSubstring('', 'world') == False

    # Tests that containSubstring returns True when subStr is empty
    def test_containsSubstring_EmptySubStr(self):
        assert containSubstring('hello world', '') == True

    # Tests that containSubstring returns False when subStr is longer than mainStr
    def test_containsSubstring_SubStrLongerThanMainStr(self):
        assert containSubstring('hello', 'world') == False

    # Tests that containSubstring returns False when subStr is not in mainStr
    def test_containsSubstring_SubStrNotInMainStr(self):
        assert containSubstring('hello world', 'goodbye') == False

    # Tests that containSubstring returns True when mainStr contains subStr with different cases
    def test_containsSubstring_MainStrContainsSubStrWithDifferentCases(self):
        assert containSubstring('Hello World', 'hello') == True
        assert containSubstring('Hello World', 'WORLD') == True
        assert containSubstring('Hello World', 'llo') == True
        # TODO: failed
        # TODO: What can be fixed: We can fix the containSubstring function by converting both mainStr and subStr to lowercase before checking if subStr is in mainStr.
        # TODO: What needs to be fixed: We can modify the test function by converting both mainStr and subStr to lowercase before passing them to containSubstring.

        #Fix 2:
            # Tests that containSubstring returns True when mainStr contains subStr with different cases
    def test_containsSubstring_MainStrContainsSubStrWithDifferentCases(self):
        assert containSubstring('Hello World', 'hello') == True
        assert containSubstring('Hello World', 'WORLD') == True
        assert containSubstring('Hello World', 'llo') == True

        #Fix 3:
            # Tests that containSubstring returns True when mainStr contains subStr with different cases
    def test_containsSubstring_MainStrContainsSubStrWithDifferentCases(self):
        assert containSubstring('Hello World', 'hello') == True
        assert containSubstring('Hello World', 'WORLD') == True
        assert containSubstring('Hello World', 'llo') == True

    # Tests that containSubstring returns True when mainStr contains subStr with leading/trailing whitespaces
    def test_containsSubstring_MainStrContainsSubStrWithLeadingTrailingWhitespaces(self):
        assert containSubstring('  Hello World  ', 'Hello') == True
        assert containSubstring('Hello World  ', 'World  ') == True
        assert containSubstring('  Hello  World  ', '  ') == True

    # Tests that containSubstring returns True when mainStr contains subStr with special characters
    def test_containsSubstring_MainStrContainsSubStrWithSpecialCharacters(self):
        assert containSubstring('Hello, World!', ',') == True
        assert containSubstring('Hello World!', '!') == True
        assert containSubstring('Hello World!', ' ') == True