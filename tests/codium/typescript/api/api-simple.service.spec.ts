// Generated by CodiumAI

import { ApiService } from "../../../../src/typescript/api/api-simple.service";

/*
Code Analysis

Main functionalities:
The ApiService class is responsible for fetching user data from an external API. It provides two methods, fetchAll() and fetchOne(id), which respectively retrieve all users or a single user by their ID. The class handles network errors and returns Promises that resolve to arrays or objects of User data.

Methods:
- fetchAll(): retrieves all users from the API and returns a Promise that resolves to an array of User objects.
- fetchOne(id): retrieves a single user by their ID from the API and returns a Promise that resolves to a User object.

Fields:
- baseUrl: a private readonly field that stores the base URL of the external API.
*/

describe("ApiService_class", () => {
  // Tests that fetchAll() returns an array of users
  it("test_fetch_all_returns_array_of_users", async () => {
    const apiService = new ApiService();
    const users = await apiService.fetchAll();
    expect(Array.isArray(users)).toBe(true);
    expect(users.length).toBeGreaterThan(0);
    expect(users[0]).toHaveProperty("id");
    expect(users[0]).toHaveProperty("name");
    expect(users[0]).toHaveProperty("username");
    expect(users[0]).toHaveProperty("email");
    expect(users[0]).toHaveProperty("address");
    expect(users[0]).toHaveProperty("phone");
    expect(users[0]).toHaveProperty("website");
    expect(users[0]).toHaveProperty("company");
  });

  // Tests that fetchOne(id) returns a single user object
  it("test_fetch_one_returns_single_user_object", async () => {
    const apiService = new ApiService();
    const user = await apiService.fetchOne(1);
    expect(user).toHaveProperty("id");
    expect(user).toHaveProperty("name");
    expect(user).toHaveProperty("username");
    expect(user).toHaveProperty("email");
    expect(user).toHaveProperty("address");
    expect(user).toHaveProperty("phone");
    expect(user).toHaveProperty("website");
    expect(user).toHaveProperty("company");
  });

  // Tests that fetchAll() throws an error if response is not ok
  it("test_fetch_all_throws_error_if_response_not_ok", async () => {
    const apiService = new ApiService();
    const mockResponse = { ok: false, statusText: "Not Found" } as any;
    jest.spyOn(global, "fetch").mockResolvedValueOnce(mockResponse);
    await expect(apiService.fetchAll()).rejects.toThrow("Not Found");
  });

  // Tests that fetchOne(id) throws an error if response is not ok
  it("test_fetch_one_throws_error_if_response_not_ok", async () => {
    const apiService = new ApiService();
    const mockResponse = { ok: false, statusText: "Not Found" } as any;
    jest.spyOn(global, "fetch").mockResolvedValueOnce(mockResponse);
    await expect(apiService.fetchOne(1)).rejects.toThrow("Not Found");
  });

  // Tests that fetchAll() throws an error if network error occurs
  it("test_fetch_all_throws_error_if_network_error_occurs", async () => {
    const apiService = new ApiService();
    jest
      .spyOn(global, "fetch")
      .mockRejectedValueOnce(new Error("Network error"));
    await expect(apiService.fetchAll()).rejects.toThrow("Network error");
  });

  // Tests that fetchOne(id) throws an error if network error occurs
  it("test_fetch_one_throws_error_if_network_error_occurs", async () => {
    const apiService = new ApiService();
    jest
      .spyOn(global, "fetch")
      .mockRejectedValueOnce(new Error("Network error"));
    await expect(apiService.fetchOne(1)).rejects.toThrow("Network error");
  });

  // Tests that fetchOne(id) throws an error if id is not a number
  it("test_fetch_one_throws_error_if_id_not_a_number", async () => {
    const apiService = new ApiService();
    await expect(apiService.fetchOne("not a number" as any)).rejects.toThrow(
      "id must be a number"
    );
  });

  // Tests that fetchAll() handles empty response
  it("test_fetch_all_handles_empty_response", async () => {
    const apiService = new ApiService();
    const mockResponse = {
      ok: true,
      json: jest.fn().mockResolvedValueOnce([]),
    } as any;
    jest.spyOn(global, "fetch").mockResolvedValueOnce(mockResponse);
    const users = await apiService.fetchAll();
    expect(Array.isArray(users)).toBe(true);
    expect(users.length).toBe(0);
  });

  // Tests that fetchOne(id) handles empty response
  it("test_fetch_one_handles_empty_response", async () => {
    const apiService = new ApiService();
    const mockResponse = {
      ok: true,
      json: jest.fn().mockResolvedValueOnce(null),
    } as any;
    jest.spyOn(global, "fetch").mockResolvedValueOnce(mockResponse);
    const user = await apiService.fetchOne(1);
    expect(user).toBeNull();
  });

  // Tests that fetchAll() handles invalid JSON response
  it("test_fetch_all_handles_invalid_json_response", async () => {
    const apiService = new ApiService();
    const mockResponse = {
      ok: true,
      json: jest.fn().mockRejectedValueOnce(new Error("Invalid JSON")),
    } as any;
    jest.spyOn(global, "fetch").mockResolvedValueOnce(mockResponse);
    await expect(apiService.fetchAll()).rejects.toThrow("Invalid JSON");
  });

  // Tests that fetchOne(id) handles invalid JSON response
  it("test_fetch_one_handles_invalid_json_response", async () => {
    const apiService = new ApiService();
    const mockResponse = {
      ok: true,
      json: jest.fn().mockRejectedValueOnce(new Error("Invalid JSON")),
    } as any;
    jest.spyOn(global, "fetch").mockResolvedValueOnce(mockResponse);
    await expect(apiService.fetchOne(1)).rejects.toThrow("Invalid JSON");
  });

  // Tests that fetchAll() handles missing fields in user object
  it("test_fetch_all_handles_missing_fields_in_user_object", async () => {
    const apiService = new ApiService();
    const mockResponse = {
      ok: true,
      json: jest.fn().mockResolvedValueOnce([
        { id: 1, name: "John Doe" },
        { id: 2, name: "Jane Doe", username: "jane_doe" },
      ]),
    } as any;
    jest.spyOn(global, "fetch").mockResolvedValueOnce(mockResponse);
    const users = await apiService.fetchAll();
    expect(users.length).toBe(2);
    expect(users[0]).toHaveProperty("id");
    expect(users[0]).toHaveProperty("name");
    expect(users[0]).toHaveProperty("username");
    expect(users[0]).toHaveProperty("email");
    expect(users[0]).toHaveProperty("address");
    expect(users[0]).toHaveProperty("phone");
    expect(users[0]).toHaveProperty("website");
    expect(users[0]).toHaveProperty("company");
    expect(users[1]).toHaveProperty("id");
    expect(users[1]).toHaveProperty("name");
    expect(users[1]).toHaveProperty("username");
    expect(users[1]).toHaveProperty("email");
    expect(users[1]).toHaveProperty("address");
    expect(users[1]).toHaveProperty("phone");
    expect(users[1]).toHaveProperty("website");
    expect(users[1]).toHaveProperty("company");
  });
});
