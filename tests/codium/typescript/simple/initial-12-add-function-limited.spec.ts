// Generated by CodiumAI

import { add } from "../../../../src/typescript/simple/add-function-limited";




/*
Code Analysis

Objective:
The objective of the 'add' function is to receive two numbers as input and return their sum, but only if both numbers are less than or equal to 10. If either number is greater than 10, the function throws an error.

Inputs:
- 'first': a number representing the first value to be added
- 'second': a number representing the second value to be added

Flow:
1. Check if either 'first' or 'second' is greater than 10
2. If either is greater than 10, throw an error
3. If both are less than or equal to 10, return the sum of 'first' and 'second'

Outputs:
- A number representing the sum of 'first' and 'second'

Additional aspects:
- The function has a type annotation for both input parameters and the return value
- The function throws an error if either input parameter is greater than 10
- The error message is 'Parameters too big'
- The function does not handle any other errors or exceptions
*/



describe('add_function', () => {

    // Tests that add function returns the correct sum of two positive numbers
    it('test_add_positive_numbers', () => {
        expect(add(2, 3)).toBe(5);
        expect(add(0, 0)).toBe(0);
        expect(add(5.5, 6.6)).toBeCloseTo(12.1);
    });

    // Tests that add function returns the correct sum of two negative numbers
    it('test_add_negative_numbers', () => {
        expect(add(-2, -3)).toBe(-5);
        expect(add(-5.5, -6.6)).toBeCloseTo(-12.1);
    });

    // Tests that add function returns the correct sum when adding zero to a number
    it('test_add_zero_to_number', () => {
        expect(add(2, 0)).toBe(2);
        expect(add(-2, 0)).toBe(-2);
        expect(add(0, 5.5)).toBeCloseTo(5.5);
    });

    // Tests that add function returns the correct sum of two decimal numbers
    it('test_add_decimal_numbers', () => {
        expect(add(2.5, 3.7)).toBeCloseTo(6.2);
        expect(add(-2.5, -3.7)).toBeCloseTo(-6.2);
        expect(add(0.1, 0.2)).toBeCloseTo(0.3);
    });

    // Tests that add function throws an error when adding two numbers greater than 10
    it('test_add_numbers_greater_than_10', () => {
        expect(() => add(11, 2)).toThrow('Parameters too big');
        expect(() => add(2, 11)).toThrow('Parameters too big');
        expect(() => add(11, 11)).toThrow('Parameters too big');
    });

    // Tests that add function returns NaN when adding a number and NaN
    it('test_add_number_and_NaN', () => {
        expect(add(2, NaN)).toBeNaN();
        expect(add(-2, NaN)).toBeNaN();
    });

    // Tests that add function returns NaN when adding a number and undefined
    // it('test_add_number_and_undefined', () => {
    //     expect(add(2, undefined)).toBeNaN();
    //     expect(add(-2, undefined)).toBeNaN();
    // });

    // Tests that add function returns the correct sum when adding a number and null
    // it('test_add_number_and_null', () => {
    //     expect(add(2, null)).toBe(2);
    //     expect(add(-2, null)).toBe(-2);
    // });

    // Tests that add function returns the correct sum when adding a positive and a negative number
    it('test_add_positive_and_negative_numbers', () => {
        expect(add(2, -3)).toBe(-1);
        expect(add(-2, 3)).toBe(1);
        expect(add(5.5, -6.6)).toBeCloseTo(-1.1);
    });

    // Tests that add function returns the correct sum of two very large negative numbers
    it('test_add_very_large_negative_numbers', () => {
        expect(add(-1000000000, -2000000000)).toBe(-3000000000);
    });

    // Tests that add function returns the correct sum of two very small decimal numbers
    it('test_add_very_small_decimal_numbers', () => {
        expect(add(0.0000000001, 0.0000000002)).toBeCloseTo(0.0000000003);
    });

    // Tests that add function returns the correct sum when adding zero and a negative number
    it('test_add_zero_and_negative_number', () => {
        expect(add(0, -2)).toBe(-2);
        expect(add(0, 5.5)).toBeCloseTo(5.5);
    });
});
